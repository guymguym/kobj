/*
   Copyright 2020 Guy Margalit.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kobj-io/kobj/pkg/apis/kobj/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKobjs implements KobjInterface
type FakeKobjs struct {
	Fake *FakeKobjV1alpha1
	ns   string
}

var kobjsResource = schema.GroupVersionResource{Group: "kobj.io", Version: "v1alpha1", Resource: "kobjs"}

var kobjsKind = schema.GroupVersionKind{Group: "kobj.io", Version: "v1alpha1", Kind: "Kobj"}

// Get takes name of the kobj, and returns the corresponding kobj object, and an error if there is any.
func (c *FakeKobjs) Get(name string, options v1.GetOptions) (result *v1alpha1.Kobj, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(kobjsResource, c.ns, name), &v1alpha1.Kobj{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Kobj), err
}

// List takes label and field selectors, and returns the list of Kobjs that match those selectors.
func (c *FakeKobjs) List(opts v1.ListOptions) (result *v1alpha1.KobjList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(kobjsResource, kobjsKind, c.ns, opts), &v1alpha1.KobjList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KobjList{ListMeta: obj.(*v1alpha1.KobjList).ListMeta}
	for _, item := range obj.(*v1alpha1.KobjList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kobjs.
func (c *FakeKobjs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(kobjsResource, c.ns, opts))

}

// Create takes the representation of a kobj and creates it.  Returns the server's representation of the kobj, and an error, if there is any.
func (c *FakeKobjs) Create(kobj *v1alpha1.Kobj) (result *v1alpha1.Kobj, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(kobjsResource, c.ns, kobj), &v1alpha1.Kobj{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Kobj), err
}

// Update takes the representation of a kobj and updates it. Returns the server's representation of the kobj, and an error, if there is any.
func (c *FakeKobjs) Update(kobj *v1alpha1.Kobj) (result *v1alpha1.Kobj, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(kobjsResource, c.ns, kobj), &v1alpha1.Kobj{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Kobj), err
}

// Delete takes name of the kobj and deletes it. Returns an error if one occurs.
func (c *FakeKobjs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(kobjsResource, c.ns, name), &v1alpha1.Kobj{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKobjs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(kobjsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.KobjList{})
	return err
}

// Patch applies the patch and returns the patched kobj.
func (c *FakeKobjs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Kobj, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kobjsResource, c.ns, name, pt, data, subresources...), &v1alpha1.Kobj{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Kobj), err
}
