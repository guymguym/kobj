/*
   Copyright 2020 Guy Margalit.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kobj-io/kobj/pkg/apis/kobj/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KobjLister helps list Kobjs.
type KobjLister interface {
	// List lists all Kobjs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Kobj, err error)
	// Kobjs returns an object that can list and get Kobjs.
	Kobjs(namespace string) KobjNamespaceLister
	KobjListerExpansion
}

// kobjLister implements the KobjLister interface.
type kobjLister struct {
	indexer cache.Indexer
}

// NewKobjLister returns a new KobjLister.
func NewKobjLister(indexer cache.Indexer) KobjLister {
	return &kobjLister{indexer: indexer}
}

// List lists all Kobjs in the indexer.
func (s *kobjLister) List(selector labels.Selector) (ret []*v1alpha1.Kobj, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kobj))
	})
	return ret, err
}

// Kobjs returns an object that can list and get Kobjs.
func (s *kobjLister) Kobjs(namespace string) KobjNamespaceLister {
	return kobjNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KobjNamespaceLister helps list and get Kobjs.
type KobjNamespaceLister interface {
	// List lists all Kobjs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Kobj, err error)
	// Get retrieves the Kobj from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Kobj, error)
	KobjNamespaceListerExpansion
}

// kobjNamespaceLister implements the KobjNamespaceLister
// interface.
type kobjNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kobjs in the indexer for a given namespace.
func (s kobjNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kobj, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kobj))
	})
	return ret, err
}

// Get retrieves the Kobj from the indexer for a given namespace and name.
func (s kobjNamespaceLister) Get(name string) (*v1alpha1.Kobj, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kobj"), name)
	}
	return obj.(*v1alpha1.Kobj), nil
}
