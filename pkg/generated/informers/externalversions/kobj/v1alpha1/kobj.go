/*
   Copyright 2020 Guy Margalit.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	kobjv1alpha1 "github.com/kobj-io/kobj/pkg/apis/kobj/v1alpha1"
	versioned "github.com/kobj-io/kobj/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/kobj-io/kobj/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/kobj-io/kobj/pkg/generated/listers/kobj/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// KobjInformer provides access to a shared informer and lister for
// Kobjs.
type KobjInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.KobjLister
}

type kobjInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewKobjInformer constructs a new informer for Kobj type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKobjInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKobjInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredKobjInformer constructs a new informer for Kobj type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKobjInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KobjV1alpha1().Kobjs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KobjV1alpha1().Kobjs(namespace).Watch(options)
			},
		},
		&kobjv1alpha1.Kobj{},
		resyncPeriod,
		indexers,
	)
}

func (f *kobjInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKobjInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *kobjInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kobjv1alpha1.Kobj{}, f.defaultInformer)
}

func (f *kobjInformer) Lister() v1alpha1.KobjLister {
	return v1alpha1.NewKobjLister(f.Informer().GetIndexer())
}
